<?php


$verify_token = ""; // Verify token 
if (!empty($_REQUEST['hub_mode']) && $_REQUEST['hub_mode'] == 'subscribe' && $_REQUEST['hub_verify_token'] == $verify_token) { 
echo $_REQUEST['hub_challenge']; 
}
include('bot_functions.php');

function init_question($questions, $token)
{
	return array("message" => '–í–æ–ø—Ä–æ—Å '.($_SESSION['qn']+1) . ' –∏–∑ 70.
'.$questions[$_SESSION['qn']]->question);
}
function setLabel($val,$ary) {
        if ($val > 100) { return ""; } else
        if ($val > 90) { return $ary[0]; } else
        if ($val > 75) { return $ary[1]; } else
        if ($val > 60) { return $ary[2]; } else
        if ($val >= 40) { return $ary[3]; } else
        if ($val >= 25) { return $ary[4]; } else
        if ($val >= 10) { return $ary[5]; } else
        if ($val >= 0) { return $ary[6]; } else
        	{return "";}
    }
function test_results($token)
{
	$ideologies_json = file_get_contents('8values_ideologies.json');
	$ideologies = json_decode($ideologies_json)->ideologies;
	$max_econ = 205;
	$max_dipl = 235;
	$max_govt = 325;
	$max_scty = 307;
	$e = calc_score($_SESSION['econ'], $max_econ)/10;
	$d = calc_score($_SESSION['dipl'], $max_dipl)/10;
	$g = calc_score($_SESSION['govt'], $max_govt)/10;
	$s = calc_score($_SESSION['scty'], $max_scty)/10;
	$econArray = ["–ö–æ–º–º—É–Ω–∏—Å—Ç–∏—á–µ—Å–∫–∞—è", "–°–æ—Ü–∏–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∞—è", "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è", "–¶–µ–Ω—Ç—Ä–∏—Å—Ç—Å–∫–∞—è", "–†—ã–Ω–æ—á–Ω–∞—è", "–ö–∞–ø–∏—Ç–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∞—è", "Laissez-Faire"];
	$diplArray = ["–ö–æ—Å–º–æ–ø–æ–ª–∏—Ç–∏—á–µ—Å–∫–∞—è", "–ò–Ω—Ç–µ—Ä–Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è", "–ú–∏—Ä–Ω–∞—è", "–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è", "–ü–∞—Ç—Ä–∏–æ—Ç–∏—á–µ—Å–∫–∞—è", "–ù–∞—Ü–∏–æ–Ω–∞–ª–∏—Å—Ç–∏—á–µ—Å–∫–∞—è", "–®–æ–≤–∏–Ω–∏—Å—Ç—Å–∫–∞—è"];
	$govtArray = ["–ê–Ω–∞—Ä—Ö–∏—Å—Ç—Å–∫–∞—è", "–õ–∏–±–µ—Ä—Ç–∞—Ä–Ω–∞—è", "–õ–∏–±–µ—Ä–∞–ª—å–Ω–∞—è", "–ú–æ–¥–µ—Ä–Ω–∏—Å—Ç—Å–∫–∞—è", "–°—Ç–∞—Ç–∏—Å—Ç—Å–∫–∞—è", "–ê–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω–∞—è", "–¢–æ—Ç–∞–ª–∏—Ç–∞—Ä–Ω–∞—è"];
	$sctyArray = ["–†–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω–∞—è", "–ö—Ä–∞–π–Ω–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è", "–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è", "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è", "–¢—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è", "–ö—Ä–∞–π–Ω–µ —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω–∞—è", "–†–µ–∞–∫—Ü–∏–æ–Ω–Ω–∞—è"];
	
    $equality  = $e;
    $peace     = $d;
    $liberty   = $g;
    $progress  = $s;
    $wealth    = ((int) 10*(100 - $equality))/10;
    $might     = ((int) 10*(100 - $peace   ))/10;
    $authority = ((int) 10*(100 - $liberty ))/10;
    $tradition = ((int) 10*(100 - $progress))/10;
	
	$ideology = "";
	$ideodist = -1;
	for ($i = 0; $i < count($ideologies); ++$i)
	{
        $dist = 0;
        $dist += pow(abs($ideologies[$i]->stats->econ - $equality), 2);
        $dist += pow(abs($ideologies[$i]->stats->govt - $liberty), 2);
        $dist += pow(abs($ideologies[$i]->stats->dipl - $peace), 1.73856063);
        $dist += pow(abs($ideologies[$i]->stats->scty - $progress), 1.73856063);
		if($ideodist == -1) $ideodist = $dist+1;
        if ($dist < $ideodist) {
            $ideology = $ideologies[$i]->name;
            $ideodist = $dist;
        }
    }
	$economicLabel = setLabel($equality, $econArray);
	$diplomaticLabel = setLabel($peace, $diplArray);
	$stateLabel = setLabel($liberty, $govtArray);
	$societyLabel = setLabel($progress, $sctyArray);
	
$return['message'] = "–ë–ª–∏–∂–∞–π—à–∞—è –∏–¥–µ–æ–ª–æ–≥–∏—è: {$ideology}.
	
–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è –æ—Å—å: {$economicLabel}
–†–∞–≤–µ–Ω—Å—Ç–≤–æ {$equality}% - {$wealth}% –†—ã–Ω–æ–∫

–î–∏–ø–ª–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—å: {$diplomaticLabel}
–ù–∞—Ü–∏—è {$might}% - {$peace}% –ú–∏—Ä

–ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∞—è –æ—Å—å: {$stateLabel}
–°–≤–æ–±–æ–¥–∞ {$liberty}% - {$authority}% –ê–≤—Ç–æ—Ä–∏—Ç–∞—Ä–Ω–æ—Å—Ç—å

–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –æ—Å—å: {$societyLabel}
–¢—Ä–∞–¥–∏—Ü–∏–∏ {$tradition}% - {$progress}% –ü—Ä–æ–≥—Ä–µ—Å—Å

–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ, –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ó–∞–Ω–æ–≤–æ¬ª.";

//message_send($_SESSION['user_id'], "–ù–µ –∑–∞–±—É–¥—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å –¥—Ä—É–∑—å—è–º–∏ –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –∏–º –æ–± —ç—Ç–æ–º —Ç–µ—Å—Ç–µ!", $token);

$preview_link = "http://bot.rtmp.ru/new_bots/8values_image.php?e={$e}&d={$d}&g={$g}&s={$s}";
		/*$tmpfname = tempnam("/var/www/html/new_bots/tmp", "FOO");
			$content = file_get_contents($preview_link);
			file_put_contents($tmpfname, $content);
			$img = json_decode(uploadImg($tmpfname, $token, $_SESSION['user_id']));
			unlink($tmpfname);
			$doc = $img->response[0]->id;
			message_send($_SESSION['user_id'], '', $token, $doc);*/
			$return['img'] = $preview_link;
	return $return;
}
function calc_max($questions)
{
	for ($i = 0; $i < count($questions); ++$i) {
		$max_econ += abs($questions[$i]->effect->econ);
		$max_dipl += abs($questions[$i]->effect->dipl);
		$max_govt += abs($questions[$i]->effect->govt);
		$max_scty += abs($questions[$i]->effect->scty);
	}
	return "max_econ: {$max_econ}, max_dipl: {$max_dipl}, max_govt: {$max_govt}, max_scty: {$max_scty}";
}
function calc_score($score, $max)
{
	return (int) (1000*($max+$score)/(2*$max));
}
function prev_question($mult, $questions, $token)
{
	if(!isset($_SESSION['prev_answer'][$_SESSION['qn']-1])) return;
	--$_SESSION['qn'];
	$_SESSION['econ'] -= $_SESSION['prev_answer'][$_SESSION['qn']] * $questions[$_SESSION['qn']]->effect->econ;
	$_SESSION['dipl'] -= $_SESSION['prev_answer'][$_SESSION['qn']] * $questions[$_SESSION['qn']]->effect->dipl;
	$_SESSION['govt'] -= $_SESSION['prev_answer'][$_SESSION['qn']] * $questions[$_SESSION['qn']]->effect->govt;
	$_SESSION['scty'] -= $_SESSION['prev_answer'][$_SESSION['qn']] * $questions[$_SESSION['qn']]->effect->scty;
	return init_question($questions, $token);
}

function next_question($mult, $questions, $token)
{
	if($_SESSION['qn'] >= 70)
	{
		return test_results($token);
	}
	
	$_SESSION['econ'] += $mult * $questions[$_SESSION['qn']]->effect->econ;
	$_SESSION['dipl'] += $mult * $questions[$_SESSION['qn']]->effect->dipl;
	$_SESSION['govt'] += $mult * $questions[$_SESSION['qn']]->effect->govt;
	$_SESSION['scty'] += $mult * $questions[$_SESSION['qn']]->effect->scty;
	$_SESSION['prev_answer'][$_SESSION['qn']] = $mult;
	++$_SESSION['qn'];
	if($_SESSION['qn'] < 70)
		return init_question($questions, $token);
	else
		return test_results($token);
}
$facebook_token = ''; 
$token = '';

$data = json_decode(file_get_contents('php://input')); 

require_once(dirname(__FILE__) . '/vendor/autoload.php');
use pimax\FbBotApp;
use pimax\Menu\MenuItem;
use pimax\Menu\LocalizedMenu;
use pimax\Messages\Message;
use pimax\Messages\MessageButton;
use pimax\Messages\StructuredMessage;
use pimax\Messages\MessageElement;
use pimax\Messages\MessageReceiptElement;
use pimax\Messages\Address;
use pimax\Messages\Summary;
use pimax\Messages\Adjustment;
use pimax\Messages\AccountLink;
use pimax\Messages\ImageMessage;
use pimax\Messages\QuickReply;
use pimax\Messages\QuickReplyButton;
use pimax\Messages\SenderAction;

$bot = new FbBotApp($facebook_token);

if (!empty($_REQUEST['hub_mode']) && $_REQUEST['hub_mode'] == 'subscribe' && $_REQUEST['hub_verify_token'] == $verify_token)
{
     // Webhook setup request
    echo $_REQUEST['hub_challenge'];
} else {

     $data = json_decode(file_get_contents("php://input"));
	 //message_send('149192198', json_encode($data), $token);
     if (!empty($data->entry[0]->messaging))
     {
            foreach ($data->entry[0]->messaging as $cur_message)
            {
				$user_id = $cur_message->sender->id;
				if(isset($cur_message->message->text)) $message = $cur_message->message->text;
				else $message = $cur_message->postback->payload;
				switch($message)
				{
					case "–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω":
						$message = "5";
						break;
					case "–°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω":
						$message = "4";
						break;
					case "–ù–µ –∑–Ω–∞—é/–ù–µ —É–≤–µ—Ä–µ–Ω":
						$message = "3";
						break;
					case "–°–∫–æ—Ä–µ–µ –Ω–µ—Å–æ–≥–ª–∞—Å–µ–Ω":
						$message = "2";
						break;
					case "–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ—Å–æ–≥–ª–∞—Å–µ–Ω":
						$message = "1";
						break;
					case "–ù–∞–∑–∞–¥":
						$message = "0";
						break;
				}
				//message_send('149192198', $user_id . " " . $message, $token);
				//$bot->send(new Message($user_id, 'Hi there'));
				session_id("fb-8values{$user_id}");
					session_start();
				similar_text($message, '–∑–∞–Ω–æ–≤–æ', $percent);
				if((!isset($_SESSION['qn']))  || ($percent >70))
		{
		$_SESSION['user_id'] = $user_id;
		$bot->send(new StructuredMessage($user_id, StructuredMessage::TYPE_BUTTON,
					[
						'text' => '–ü—Ä–∏–≤–µ—Ç!
–Ø –±—É–¥—É –ø–∏—Å–∞—Ç—å —Ç–µ–±–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –í—ã–±–∏—Ä–∞–π —Å—Ç–µ–ø–µ–Ω—å —Å–æ–≥–ª–∞—Å–∏—è —Å –Ω–∏–º–∏.

–ß—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å, –≤—ã–±–µ—Ä–∏ "–ù–∞–∑–∞–¥".

–û—Ç–≤–µ—Ç—å, —á—Ç–æ —Å–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω –∏–ª–∏ —á—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω (—Ç–æ –µ—Å—Ç—å –ø–æ–Ω—è–ª, –∫–∞–∫ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è)',
						'buttons' => [
							new MessageButton(MessageButton::TYPE_POSTBACK, '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω'),
							new MessageButton(MessageButton::TYPE_POSTBACK, '–°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω'),
							new MessageButton(MessageButton::TYPE_POSTBACK, '–ù–µ –∑–Ω–∞—é/–ù–µ —É–≤–µ—Ä–µ–Ω')
						]
					]
				));
			$bot->send(new StructuredMessage($user_id,
				StructuredMessage::TYPE_BUTTON,
				[
					'text' => 'üìé',
					'buttons' => [
						new MessageButton(MessageButton::TYPE_POSTBACK, '–°–∫–æ—Ä–µ–µ –Ω–µ—Å–æ–≥–ª–∞—Å–µ–Ω'),
						new MessageButton(MessageButton::TYPE_POSTBACK, '–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ—Å–æ–≥–ª–∞—Å–µ–Ω'),
						new MessageButton(MessageButton::TYPE_POSTBACK, '–ù–∞–∑–∞–¥')
					]
				]
			));
		$_SESSION['qn'] = -1;
	}
	else
	{
		$questions_json = file_get_contents('8values_questions.json');
		$questions = json_decode($questions_json)->questions;
		if($_SESSION['qn'] == -1)
		{
			$_SESSION['econ'] = 0.0;
			$_SESSION['dipl'] = 0.0;
			$_SESSION['govt'] = 0.0;
			$_SESSION['scty'] = 0.0;
			$_SESSION['prev_answer'] = array();
			if(($message == 4) || ($message == 5))
			{
				$_SESSION['qn'] = 0;
					$reply = init_question($questions, $token);			
				$bot->send(new StructuredMessage($user_id, StructuredMessage::TYPE_BUTTON,
					[
						'text' => $reply['message'],
						'buttons' => [
							new MessageButton(MessageButton::TYPE_POSTBACK, '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω'),
							new MessageButton(MessageButton::TYPE_POSTBACK, '–°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω'),
							new MessageButton(MessageButton::TYPE_POSTBACK, '–ù–µ –∑–Ω–∞—é/–ù–µ —É–≤–µ—Ä–µ–Ω')
						]
					]
				));
				$bot->send(new StructuredMessage($user_id,
					StructuredMessage::TYPE_BUTTON,
					[
						'text' => 'üìé',
						'buttons' => [
							new MessageButton(MessageButton::TYPE_POSTBACK, '–°–∫–æ—Ä–µ–µ –Ω–µ—Å–æ–≥–ª–∞—Å–µ–Ω'),
							new MessageButton(MessageButton::TYPE_POSTBACK, '–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ—Å–æ–≥–ª–∞—Å–µ–Ω'),
							new MessageButton(MessageButton::TYPE_POSTBACK, '–ù–∞–∑–∞–¥')
						]
					]
				));
				return;
			}
			else
			{
				$bot->send(new StructuredMessage($user_id, StructuredMessage::TYPE_BUTTON,
					[
						'text' => '–û—Ç–≤–µ—Ç—å, —á—Ç–æ —Å–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω –∏–ª–∏ —á—Ç–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω (—Ç–æ –µ—Å—Ç—å –ø–æ–Ω—è–ª, –∫–∞–∫ —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è)',
						'buttons' => [
							new MessageButton(MessageButton::TYPE_POSTBACK, '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω'),
							new MessageButton(MessageButton::TYPE_POSTBACK, '–°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω'),
							new MessageButton(MessageButton::TYPE_POSTBACK, '–ù–µ –∑–Ω–∞—é/–ù–µ —É–≤–µ—Ä–µ–Ω')
						]
					]
				));
			$bot->send(new StructuredMessage($user_id,
				StructuredMessage::TYPE_BUTTON,
				[
					'text' => 'üìé',
					'buttons' => [
						new MessageButton(MessageButton::TYPE_POSTBACK, '–°–∫–æ—Ä–µ–µ –Ω–µ—Å–æ–≥–ª–∞—Å–µ–Ω'),
						new MessageButton(MessageButton::TYPE_POSTBACK, '–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ—Å–æ–≥–ª–∞—Å–µ–Ω'),
						new MessageButton(MessageButton::TYPE_POSTBACK, '–ù–∞–∑–∞–¥')
					]
				]
			));
				return;
			}
		}
		$reply = array();
		switch($message)
		{
			case "5":
				$reply = next_question(1.0, $questions, $token);
				break;
			case "4":
				$reply = next_question(0.5, $questions, $token);
				break;
			case "3":
				$reply = next_question(0.0, $questions, $token);
				break;
			case "2":
				$reply = next_question(-0.5, $questions, $token);
				break;
			case "1":
				$reply = next_question(-1.0, $questions, $token);
				break;
			case "0":
				$reply = prev_question($mult, $questions, $token);
				break;
			case "calc_max":
				$reply = array("message" => calc_max($questions));
				break;
			case "test_result":
				if($_SESSION['qn'] < 69)
				{
					$_SESSION['econ'] = -30.0;
					$_SESSION['dipl'] = 132.5;
					$_SESSION['govt'] = 235;
					$_SESSION['scty'] = 202;
					$_SESSION['qn'] = 71;
				}
				$reply = next_question(0, $questions, $token);
				break;
			default:
				$reply = array("message" => '–í—ã–±–∏—Ä–∞–π, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Å–æ–≥–ª–∞—Å–µ–Ω —Å —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è–º–∏.

–ß—Ç–æ–±—ã –∑–∞–Ω–æ–≤–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å, –≤—ã–±–µ—Ä–∏ "–ù–∞–∑–∞–¥".

–£—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ:
'.$questions[$_SESSION['qn']]->question);
				break;
		}
		//message_send('149192198', json_encode($reply), $token);
		if(!isset($reply['img']))
		{
			
			$bot->send(new StructuredMessage($user_id, StructuredMessage::TYPE_BUTTON,
				[
					'text' => $reply['message'],
					'buttons' => [
						new MessageButton(MessageButton::TYPE_POSTBACK, '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω'),
						new MessageButton(MessageButton::TYPE_POSTBACK, '–°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω'),
						new MessageButton(MessageButton::TYPE_POSTBACK, '–ù–µ –∑–Ω–∞—é/–ù–µ —É–≤–µ—Ä–µ–Ω')
					]
				]
			));
			$bot->send(new StructuredMessage($user_id,
				StructuredMessage::TYPE_BUTTON,
				[
					'text' => 'üìé',
					'buttons' => [
						new MessageButton(MessageButton::TYPE_POSTBACK, '–°–∫–æ—Ä–µ–µ –Ω–µ—Å–æ–≥–ª–∞—Å–µ–Ω'),
						new MessageButton(MessageButton::TYPE_POSTBACK, '–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ—Å–æ–≥–ª–∞—Å–µ–Ω'),
						new MessageButton(MessageButton::TYPE_POSTBACK, '–ù–∞–∑–∞–¥')
					]
				]
			));
			
		}
		else
		{
			$bot->send(new Message($user_id, $reply['message']));
			$bot->send(new ImageMessage($user_id, $reply['img']));
		}
	}
	
	
            }
   }
}
